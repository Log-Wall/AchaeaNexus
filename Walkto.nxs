{"name":"walkto","enabled":true,"description":"Denizen Walkto","type":"group","id":1,"items":[{"type":"function","name":"onLoad","enabled":true,"id":2,"code":"run_function('entryHelper', {}, 'Walkto');\nrun_function('walktoCollector', {}, 'Walkto');\nrun_function('denizenCollector', {}, 'Walkto');"},{"type":"function","name":"onGMCP","enabled":true,"id":15,"code":"if(args.gmcp_method == 'Char.Items.List')\n    GMCP.Char.Items.List = args.gmcp_args;\n\nif(args.gmcp_method == 'Room.Info') {\n    GMCP.Room.Info = args.gmcp_args;\n    if (denizenCollector.toggle==true)\n        denizenCollector.collect();\n}"},{"type":"function","name":"entryHelper","enabled":true,"id":21,"code":"entryHelper = {\n\tpageBreak: 20,\n    pageIndex: 0,\n    displayCap: {}, \n    displayClick: \"\",\n    displayEntries: {},\n    displayModule: {}\n}\n\nGMCP.Char={Items:{List:{}}}\nGMCP.Room={Info:{}}\n\nentryHelper.download_file = function (filename, text) {\n    let element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', filename);\n    element.style.display = 'none';\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n    return true;\n}\n\nentryHelper.notice = function(moduleName, txt) {\n\tlet msg = $('<span></span>', {class:\"mono\"});\n    $('<span></span>',{style:'color:DodgerBlue'}).text('[- ').appendTo(msg);\n    $('<span></span>',{style:'color:OrangeRed'}).text(moduleName).appendTo(msg);\n    $('<span></span>',{style:'color:DodgerBlue'}).text(' -] ').appendTo(msg);\n    $('<span></span>',{style:'color:GoldenRod'}).text(txt).appendTo(msg)\n    \n    print(msg[0].outerHTML);\n}\n\nentryHelper.addEntry= function(obj, module) {\n    if (!obj.id) {\n        module.notice('Attempted to add an invalid entry');\n        return;\n    }\n    \n    if (typeof module.entries.find(x => x.id == obj.id) === 'undefined') {\n    \tmodule.entries.push(obj);\n        module.notice(`Entry added for ${obj.name}`);\n        module.save();\n    }\n    else\n        module.notice(`There is already an entry for ${obj.id} - ${obj.name}.`);\n}\n\nentryHelper.removeEntry = function(obj, module) {\n\tlet entryPos = module.entries.findIndex(x => x.id == obj.id);\n    \n    if (entryPos>=0) {\n    \tlet rem = module.entries.splice(entryPos, 1);\n        module.notice(`Removed Walkto for ${rem[0].name} (${rem[0].id}) in ${rem[0].area}`);\n        module.save();\n    }\n    else\n        module.notice('Attempted to remove an entry that does not exist.');    \n}\n\nentryHelper.generateTable = function(module, entries, caption, click) {\n    entryHelper.pageIndex = 0;\n    entryHelper.displayEntries = entries;\n    entryHelper.displayCap = caption;\n    entryHelper.displayClick = click;\n    entryHelper.displayModule = module;\n    entryHelper.displayTable();\n}\n\nentryHelper.displayTable = function() {\n    let entries = entryHelper.displayEntries;\n    let caption = entryHelper.displayCap;\n    let click = entryHelper.displayClick;\n    let module = entryHelper.displayModule;\n    \n    let tab = $(\"<table></table>\", {class:\"mono\", style:\"max-width:100%\"});\n    if (entryHelper.pageIndex == 0) {\n        let cap = $(\"<caption></caption>\", {style:\"text-align:left\"}).appendTo(tab);\n        $('<span></span>',{style:'color:DodgerBlue'}).text('[- ').appendTo(cap);\n        $('<span></span>',{style:'color:OrangeRed'}).text(module.title).appendTo(cap);\n        $('<span></span>',{style:'color:DodgerBlue'}).text(' -] ').appendTo(cap);\n        $('<span></span>',{style:'color:GoldenRod'}).text('Select a Denizen to ').appendTo(cap)\n        caption.appendTo(cap);\n    \n        let header = $(\"<tr></tr>\", {style: \"text-align:left;color:Ivory\"}).appendTo(tab);\n        $(\"<th></th>\", {style:'width:2em'}).text('').appendTo(header);\n        $(\"<th></th>\", {style:'width:5em'}).text('ID').appendTo(header);\n        $(\"<th></th>\", {style:'width:auto'}).text('Name').appendTo(header);\n        $(\"<th></th>\", {style:'width:auto'}).text('Area').appendTo(header);\n        $(\"<th></th>\", {style:'width:5em'}).text('Room').appendTo(header);\n        $(\"<th></th>\", {style:'width:2em'}).text('').appendTo(header);\n\t}\n    else {\n        let header = $(\"<tr></tr>\", {style: \"text-align:left;color:Ivory\"}).appendTo(tab);\n        $(\"<th></th>\", {style:'width:2em'}).text('').appendTo(header);\n        $(\"<th></th>\", {style:'width:5em'}).text('').appendTo(header);\n        $(\"<th></th>\", {style:'width:auto'}).text('').appendTo(header);\n        $(\"<th></th>\", {style:'width:auto'}).text('').appendTo(header);\n        $(\"<th></th>\", {style:'width:5em'}).text('').appendTo(header);\n        $(\"<th></th>\", {style:'width:2em'}).text('').appendTo(header);\n    }\n    \n    let startIndex = entryHelper.pageIndex > 0 ? (entryHelper.pageIndex*entryHelper.pageBreak) : 0;\n    for(let i = startIndex;i < entries.length && i < startIndex+entryHelper.pageBreak;i++) {\n    \tlet row  = $(\"<tr></tr>\", {style:'cursor:pointer;color:Ivory;text-decoration:underline;'}).appendTo(tab);\n        if (click!='addEntry')\n        \t$(\"<td></td>\", {style:\"color:red;text-decoration:underline\", onclick: `${module.name}.removeEntry(${JSON.stringify(entries[i])});`}).text('[X]').appendTo(row);\n        else\n             $(\"<td></td>\").text(\"\").appendTo(row);\n        $(\"<td></td>\", {onclick: `${module.name}.${click}(${JSON.stringify(entries[i])});`}).text(entries[i].id).appendTo(row);\n        $(\"<td></td>\", {onclick: `${module.name}.${click}(${JSON.stringify(entries[i])});`}).text(entries[i].name).appendTo(row);\n        $(\"<td></td>\", {onclick: `${module.name}.${click}(${JSON.stringify(entries[i])});`}).text(entries[i].area).appendTo(row);\n        $(\"<td></td>\", {onclick: `${module.name}.${click}(${JSON.stringify(entries[i])});`}).text(entries[i].room).appendTo(row);\n        if (module === denizenCollector)\n        \t$(\"<td></td>\", {style:\"color:LawnGreen;text-decoration:underline\", onclick: `walkto.addEntry(${JSON.stringify(entries[i])});`}).text('[+]').appendTo(row);\n        else\n             $(\"<td></td>\").text(\"\").appendTo(row);\n    }   \n    \n    print(tab[0].outerHTML);\n \n    let pagination;\n    if(Math.ceil(entryHelper.displayEntries.length/entryHelper.pageBreak) > entryHelper.pageIndex+1) {\n        pagination = $(\"<span></span>\", {style:'color:Goldenrod'}).text(`Displaying ${startIndex+entryHelper.pageBreak} of ${entryHelper.displayEntries.length}.`);\n        entryHelper.pageIndex++;\n        $(\"<span></span>\", {style:'color:Goldenrod'}).text(' Click for ').appendTo(pagination);\n        $('<a></a>', {style:'cursor:pointer;color:Ivory;text-decoration:underline;',onclick:'entryHelper.displayTable()'}).text('MORE').appendTo(pagination);\n    }\n    else {\n        pagination = $(\"<span></span>\", {style:'color:Goldenrod'}).text(`Displaying ${entryHelper.displayEntries.length} of ${entryHelper.displayEntries.length}.`);\n    }\n        \n    print(pagination[0].outerHTML);                                                                                               \n}\n"},{"type":"function","name":"walktoCollector","enabled":true,"id":5,"code":"walkto = {\n    title: 'WALKTO',\n    name: 'walkto'\n}\n\n//----------------------------------------------------------------\n// Snipped to convert previous method of saving as an array of objects, \n// to saving the whole walkto object. Mostly because it looks cleaner\n// in the Nexus variables display. This only needs to run once.\n// Clunky solution for ease of use of other users. Will remove in \n// future update.\nif(Array.isArray(get_variable(\"walktoDB\")))\n   walkto.entries = get_variable(\"walktoDB\");\nelse if(typeof get_variable(\"walktoDB\") != 'undefined' && get_variable(\"walktoDB\").entries.length)\n\twalkto.entries = get_variable(\"walktoDB\").entries; \nelse\n    walkto.entries = [];   \n//---------------------------------------------------------------\n\nwalkto.save = function() {\n    set_variable(\"walktoDB\",walkto);\n}\n\n//----------------------------------------------------------------\n// Snipped to convert old entries from room int, to room arrays.\n// This only needs to run once. Clunky solution for ease of use\n// of other users. Will remove in future update.\nfor(let entry of walkto.entries) {\n    if (!Array.isArray(entry.room))\n        entry.room = [entry.room];\n}\nwalkto.save();\n//---------------------------------------------------------------\n\nwalkto.notice = function(txt) {\n    entryHelper.notice(this.name, txt);\n}\n\n\nwalkto.addEntry = function(obj) {\n    entryHelper.addEntry(obj, this);\n}\n\nwalkto.removeEntry = function(obj) {\n    entryHelper.removeEntry(obj, this);\n}\n\nwalkto.pathTrack = function(obj) {\n    walkto.notice(`Walking to ${obj.name}`);\n    send_direct(`PATH TRACK ${obj.room}`);\n}\n\nwalkto.displayAddTable = function(roomDenizens) {\n    let cap = $('<span></span>',{style:'font-weight:bold;color:LawnGreen'}).text('ADD');\n    let click = 'addEntry';\n    let entries = roomDenizens;\n\n    entryHelper.generateTable(this, entries, cap, click);\t  \n}\n\nwalkto.displayRemoveTable = function() {\n    let cap = $('<span></span>',{style:'font-weight:bold;color:Red'}).text('REMOVE');\n    let click = 'removeEntry';\n    let entries = walkto.entries.sort((a,b)=>a.area>b.area);\n\n    entryHelper.generateTable(this, entries, cap, click);\t    \n}\n\nwalkto.displayWalktoTable = function(walkEntries) {\n    let cap = $('<span></span>',{style:'font-weight:bold;color:White'}).text('WALKTO');\n    let click = 'pathTrack';\n    let entries = walkEntries;\n    \n    entryHelper.generateTable(this, entries, cap, click);\t    \n}\n\nwalkto.importFile = function(evt) {\n    let file = evt.target.files[0]; \n\n    if (file) {\n        let reader = new FileReader();\n        reader.onload = function(e) { \n            let txt = e.target.result;\n            let importEntries = txt.split(\"|\");\n            let obj = {};\n            for(let x of importEntries) {\n                obj = JSON.parse(x);\n                walkto.addEntry(obj);\n            }\n            walkto.notice('Import of entries complete.');\n        }\n        reader.readAsText(file);\n    } \n    else\n        alert(\"Failed to load file\");\n}"},{"type":"function","name":"denizenCollector","enabled":true,"id":18,"code":"denizenCollector = {\n    title: 'DENIZEN',\n    name: 'denizenCollector',\n\ttoggle: false,  \n}\n\nif(typeof get_variable(\"denizenDB\") != 'undefined' && get_variable(\"denizenDB\").entries.length)\n\tdenizenCollector.entries = get_variable(\"denizenDB\").entries; \nelse\n    denizenCollector.entries = [];\n\ndenizenCollector.collect = function() {\n    console.log('collecting');\n    // Get all denizens in the current room\n    let roomDenizens = GMCP.Char.Items.List.items.filter(x => x.attrib == 'm' || x.attrib == 'mx');\n    let newDenizens = [];\n    let roamers = [];\n\n    if(roomDenizens.length>0) {\n        // Remove any denizens that are already in the entries\n        newDenizens = roomDenizens.filter(x => !denizenCollector.entries.find(y => x.id == y.id));\n        \n        // Find denizens that already have entries, but are in a new room.\n        roamers = roomDenizens.filter(x => denizenCollector.entries.find(y => x.id == y.id));\n        roamers = roamers.filter(x => x.room != GMCP.Room.Info.num);\n    }\n    else\n        return;\n\n    // Add room number and area to each denizen object\n    for(let denizen of newDenizens) {\n        denizen.room = [GMCP.Room.Info.num];\n        denizen.area = GMCP.Room.Info.area;\n        denizenCollector.entries.push(denizen);    \n    }\n    \n    for(let denizen of roamers) {\n        denizenCollector.entries.find(x => x.id == denizen.id).room.push(GMCP.Room.Info.num);\n    }\n    \n    denizenCollector.save();    \n}\n\ndenizenCollector.addEntry = function(obj) {\n    entryHelper.addEntry(obj, this);\n}\n\ndenizenCollector.removeEntry = function(obj) {\n    entryHelper.removeEntry(obj, this);\n}\n\ndenizenCollector.save = function() {\n    set_variable(\"denizenDB\",denizenCollector);\n}\n\ndenizenCollector.notice = function(txt) {\n\tentryHelper.notice('DENIZEN', txt);\n}\n\ndenizenCollector.pathTrack = function(obj) {\n    walkto.notice(`Walking to ${obj.name}`);\n    if (!obj.room.includes(GMCP.Room.Info.num))\n    \tsend_direct(`PATH TRACK ${obj.room[0]}`);\n    else {\n        let nextRoom = obj.room[obj.room.indexOf(GMCP.Room.Info.num)+1]\n        send_direct(`PATH TRACK ${nextRoom}`)\n    }\n}\n\ndenizenCollector.displayWalktoTable = function(walkEntries) {\n    let cap = $('<span></span>',{style:'font-weight:bold;color:White'}).text('WALKTO');\n    let click = 'pathTrack';\n    let entries = walkEntries;\n    \n    entryHelper.generateTable(this, entries, cap, click);\t    \n}\n\ndenizenCollector.importFile = function(evt) {\n    let file = evt.target.files[0]; \n\n    if (file) {\n        let reader = new FileReader();\n        reader.onload = function(e) { \n            let txt = e.target.result;\n            let importEntries = txt.split(\"|\");\n            let obj = {};\n            for(let x of importEntries) {\n                obj = JSON.parse(x);\n                denizenCollector.addEntry(obj);\n            }\n            denizenCollector.notice('Import of entries complete.');\n        }\n        reader.readAsText(file);\n    } \n    else\n        alert(\"Failed to load file\");\n}"},{"type":"alias","name":"","enabled":true,"id":13,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"run_function('onLoad', {}, 'Walkto');\nwalkto.notice('Module loaded.');"}],"text":"^d(w|d) reload$"},{"type":"alias","name":"","enabled":true,"id":4,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"// Get all denizens in the current room\nlet roomDenizens = GMCP.Char.Items.List.items.filter(x => x.attrib == 'm' || x.attrib == 'mx');\n\n// Remove any denizens that are already in the entries\nif(walkto.entries.length>0) \n\troomDenizens = roomDenizens.filter(x => !walkto.entries.find(y => x.id == y.id))\n\n// Add room number and area to each denizen object\nfor(let denizen of roomDenizens) {\n    denizen.room = [GMCP.Room.Info.num];\n    denizen.area = GMCP.Room.Info.area;\n}\n\nwalkto.displayAddTable(roomDenizens);"}],"text":"dw add"},{"type":"alias","name":"","enabled":true,"id":7,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"// Remove entry if found. If not found, show all entries for 'click' removal.\nif (args[1])\n\twalkto.removeEntry(args[1]);\nelse\n    walkto.displayRemoveTable();"}],"text":"^dw rem(?:\\s)?(\\d+)?$"},{"type":"alias","name":"","enabled":true,"id":6,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"//Walk to a specific denizen id.\nlet numEntries = walkto.entries.filter(x => x.id == args[1]);\n\nif (numEntries.length == 1) {\n    walkto.notice(`Walking to ${numEntries[0].name}`);\n    send_direct(`PATH TRACK ${numEntries[0].room}`);\n}\nelse\n    walkto.notice(`No entry was found for ${args[1]}. Try dw search.`);"}],"text":"^dwalk(?:\\s)?(\\d+)?$"},{"type":"alias","name":"","enabled":true,"id":10,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"// Walk to a denizen by name. If multiple denizens are found that match the provided name. Present a click list for walking.\nlet test = args[1].toLowerCase().trim();\nlet numEntries = walkto.entries.filter(x => x.name.toLowerCase().includes(test));\nif (numEntries.length == 1) {\n    walkto.notice(`Walking to ${numEntries[0].name}`);\n\tsend_direct(`PATH TRACK ${numEntries[0].room}`);\n}\nelse if (numEntries.length == 0)\n    walkto.notice(`No entry was found matching \"${args[1]}\"`);\nelse if (numEntries.length > 1)\n    walkto.displayWalktoTable(numEntries);\n    "}],"text":"^dwalk((\\s\\w+)+)$"},{"type":"alias","name":"","enabled":true,"id":8,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"let module = {};\n\nif (args[1] == 'd')\n    module = denizenCollector;\nelse\n    module = walkto;\n\n// Search all entries for matches based on name. Partial matches will also return. Not case-sensitive.\nlet test = args[2].toLowerCase().trim();\nlet numEntries = module.entries.filter(x => x.name.toLowerCase().includes(test));\nif (numEntries.length > 0)\n\tmodule.displayWalktoTable(numEntries);\nelse\n    module.notice(`No entries were found matching \"${args[2]}\"`);\n    "}],"text":"^d(w|d) search((?:\\s\\w+)+)$"},{"type":"alias","name":"","enabled":true,"id":9,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"let module = {};\n\nif (args[1] == 'd')\n    module = denizenCollector;\nelse\n    module = walkto;\n\n// If no area is provided, check against current area.\nlet area = args[1] ? args[1].toLowerCase() : GMCP.Room.Info.area.toLowerCase();\n\nlet entries = module.entries.filter(x => x.area.toLowerCase() == area);\nmodule.displayWalktoTable(entries);\n    "}],"text":"^d(w|d) area(?:\\s)?(\\w+)?$"},{"type":"alias","name":"","enabled":true,"id":12,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"// This is used to create custom landmarks in the walkto entries. For places of note that are not specificially tied to a denizen. Or areas where the denizen is aggro you can set a landmark with the denizen name for dw search/dwalk, at a safe adjacent location.\n\nlet landmark = {\n\tid: Math.floor(Math.random() * 1000000) + 10000, //generate a random number for a unique id.\n    name: '(Landmark) ' + args[1].trim(), // Adding '(Landmark)' will allow \"dw search landmark\" to see all personal landmarks set.\n    room: GMCP.Room.Info.num,\n    area: GMCP.Room.Info.area\n}\n\nwalkto.addEntry(landmark);"}],"text":"^dw create((?:\\s\\w+)+)$"},{"type":"alias","name":"","enabled":true,"id":11,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"let module = {};\n\nif (args[1] == 'd')\n    module = denizenCollector;\nelse\n    module = walkto;\n\n// Display table for all entries in every area.\nlet entries = module.entries.sort((a,b)=>a.area>b.area?1:((b.area>a.area)?-1:0));\nmodule.displayWalktoTable(entries);"}],"text":"^d(w|d) all$"},{"type":"alias","name":"","enabled":true,"id":16,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"let module = {};\n\nif (args[1] == 'd')\n    module = denizenCollector;\nelse\n    module = walkto;\n\nconst now = new Date();\nlet exportEntries = JSON.stringify(module.entries[0]) + \"|\";\nfor(let i=1;i<module.entries.length-1;i++) {\n    exportEntries += JSON.stringify(module.entries[i]) + \"|\";\n}\nexportEntries += JSON.stringify(module.entries[module.entries.length-1]);\n\nlet fileName = `${module.name}_Export-${now.getFullYear()}${now.getMonth()<9?\"0\":\"\"}${now.getMonth()+1}${now.getDate()<9?\"0\":\"\"}${now.getDate()}`;\nentryHelper.download_file(fileName,exportEntries);"}],"text":"^d(w|d) export$"},{"type":"alias","name":"","enabled":true,"id":17,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"let module = {};\n\nif (args[1] == 'd')\n    module = denizenCollector;\nelse\n    module = walkto;\n\nlet main = $(\"<div></div>\", {\n    id: 'walktoImport',\n    class: \"container\",\n});\n\nmain.dialog({\n    title: 'Walkto Importer',\n    close: function() {\n        console.log(\"closing\");\n        $('#'+this.id).parent().remove();\n    }\n});\n\n$('<input></input>', {\n    type:'file',\n    id:'file',\n    name:'file',\n\taccept:'.txt'})\n\t\t.change(module.importFile)\n\t\t.appendTo(main);"}],"text":"^d(w|d) import$"},{"type":"alias","name":"","enabled":true,"id":19,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"if (denizenCollector.toggle==true) {\n    denizenCollector.toggle=false;\n    denizenCollector.notice('No longer collecting entries.');\n}\nelse {\n    denizenCollector.toggle=true;\n    denizenCollector.notice('Now collecting entries.');\n}"}],"text":"dd toggle"}]}
